<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parameters
gold = 0;
counter = 0;
hlth = 20;
attack = 5;
global.p_turn = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete floor
with(instance_nearest(x, y, obj_floor))
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check(ord('Z'))) {
    view_wview = view_wport * 4;
    view_hview = view_hport * 4;
} else {
    view_wview = view_wport;
    view_hview = view_hport;
}
view_xview = x - (view_wview - sprite_width) / 2;
view_yview = y - (view_hview - sprite_height) / 2;
room_caption = 'Position: (' + string(x div 32) + '; ' + string(y div 32) + ')';

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if (keyboard_check_released(vk_numpad8) || keyboard_check_released(ord('8')))
{
    if (!place_meeting(x, y - movespeed, obj_entity))
    {
        if (!place_meeting(x, y - movespeed, obj_wall))// &amp;&amp; global.p_turn == true)
        {
            instance_create(x, y, obj_floor);
            y -= movespeed;
            // global.p_turn = false;
        }
    }
    else
    {
        target = instance_place(x, y - movespeed, obj_entity);
        target.hp-=attack;
    }
       
}
if (keyboard_check_released(vk_numpad6) || keyboard_check_released(ord('6')))
{
    if(!place_meeting(x + movespeed, y, obj_entity))
    {
        if (!place_meeting(x + movespeed, y, obj_wall))// &amp;&amp; global.p_turn = true)
        {
            instance_create(x, y, obj_floor);
            x += movespeed;
        }
    }    
    else
    {
        target = instance_place(x + movespeed, y, obj_entity);
        target.hp-=attack;
    }
}
if (keyboard_check_released(vk_numpad4) || keyboard_check_released(ord('4')))
{
    if(!place_meeting(x - movespeed, y, obj_entity))
    {
        if (!place_meeting(x - movespeed, y, obj_wall))// &amp;&amp; global.p_turn == true)
        {
            instance_create(x, y, obj_floor);
           x -= movespeed;
           // global.p_turn = false;
        }
    }
    else
    {
        target = instance_place(x - movespeed, y, obj_entity);
        target.hp-=attack;
    }
}
if (keyboard_check_released(vk_numpad2) || keyboard_check_released(ord('2')))
{
    if (!place_meeting(x, y + movespeed, obj_entity))
    {
        if (!place_meeting(x, y + movespeed, obj_wall))// &amp;&amp; global.p_turn == true)
        {
             instance_create(x, y, obj_floor);
             y += movespeed;
            //global.p_turn = false;
        }
    }
    else
    {
        target = instance_place(x, y + movespeed, obj_entity);
        target.hp-=attack;
    }
}
if ((keyboard_check_released(vk_numpad1) || keyboard_check_released(ord('1'))))
{
    if (!place_meeting(x - movespeed, y + movespeed, obj_entity))
    {
        if (!place_meeting(x - movespeed, y + movespeed, obj_wall))// &amp;&amp; global.p_turn == true)
        {
            instance_create(x, y, obj_floor);
            y += movespeed;
            x -= movespeed;
            //global.p_turn = false;
        }
    }
    else
    {
        target = instance_place(x - movespeed, y + movespeed, obj_entity);
        target.hp-=attack;
    }
}
if ((keyboard_check_released(vk_numpad3) || keyboard_check_released(ord('3'))))
{
    if(!place_meeting(x + movespeed, y + movespeed, obj_entity))
    {
        if (!place_meeting(x + movespeed, y + movespeed, obj_wall))// &amp;&amp; global.p_turn == true)
        {
            instance_create(x, y, obj_floor);
            y += movespeed;
            x += movespeed;
            //global.p_turn = false;
        }
    }
    else
    {
        target = instance_place(x + movespeed, y + movespeed, obj_entity);
        target.hp-=attack;
    }
}
if ((keyboard_check_released(vk_numpad7) || keyboard_check_released(ord('7'))))
{
    if (!place_meeting(x - movespeed, y - movespeed, obj_entity))
    {
        if (!place_meeting(x - movespeed, y - movespeed, obj_wall))// &amp;&amp; global.p_turn == true)
        {
            instance_create(x, y, obj_floor);
            y -= movespeed;
            x -= movespeed;
            //global.p_turn = false;
        }
    }
    else
    {
        target = instance_place(x - movespeed, y - movespeed, obj_entity);
        target.hp-=attack;
    }
}
if ((keyboard_check_released(vk_numpad9) || keyboard_check_released(ord('9'))))
{
    if (!place_meeting(x + movespeed, y - movespeed, obj_entity))
    {
        if (!place_meeting(x + movespeed, y - movespeed, obj_wall))// &amp;&amp; global.p_turn == true)
        {
            instance_create(x, y, obj_floor);
            y -= movespeed;
            x += movespeed;
            //global.p_turn = false;
        }
    }
    else
    {
        target = instance_place(x + movespeed, y - movespeed, obj_entity);
        target.hp-=attack;
    }
}
target = instance_place(x, y, obj_floor);
if (instance_exists(target))
    with(target)
        instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collect Items

if(place_meeting(x, y, obj_gold))
{
    target = instance_nearest(x, y, obj_gold);
    gold += target.amount;
    with(target)
        instance_destroy();
}
window_set_caption(string(gold));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
